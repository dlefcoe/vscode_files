{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"if __name__ == __main__": {
		"prefix": "if __name__",
		"body": [
			"# main guard idiom",
			"if __name__=='__main__':",
			"    main()"
		],
		"description": "the main guard"
	},


	"def": {
		"prefix": "def function():",
		"body": [
			"def function():",
			"    ''' the function doc string '''",
			"    $1",
			"    return"
		],
		"description": "define a function"
	},


	"for": {
		"prefix": "for i in range():",
		"body": [
			"for i in range($1):",
			"    pass"
		],
		"description": "for loop"
	},

	"class with init": {
		"prefix": "class",
		"body": [
			"class MyClass:",
			"    ''' description of the class '''",
			"    ",
			"    def __init__(self, a):",
			"        self.a = a",
			"        return",
			"    ",
			"    ",
			"    def __repr__(self):",
			"        return f'{self.__class__.__name__}({self.a!r})'",
			"    "


		],
		"description": "Simple class skeleton with init"
	},

	"dataclass with decorator": {
		"prefix": "class",
		"body": [
			"@dataclass",
			"class MyDataClass:",
			"    ''' description of the dataclass '''",
			"    a: int",
			"    b: int",
			"    "

		],
		"description": "Simple dataclass with decorator (from dataclasses import dataclass)"
	},

	"with open (read)": {
		"prefix": "with open",
		"body": [
			"with open('my_file.txt', 'r') as f:",
			"    data = f.read()" 
		],
		"description": "Open file for writing using a with statement"
	},

	"try: - except: pattern": {
		"prefix": "try-except",
		"body": [
			"try:",
			"    pass",
			"",
			"except Exception as e:",
			"    print('exception found:', e)",
			"" 
		],
		"description": "try except pattern"
	},

	"if - elif - else": {
		"prefix": "if - elif - else",
		"body": [
			"if (True):",
			"    pass",
			"elif (True):",
			"    pass",
			"else:",
			"    pass",
			"" 
		],
		"description": "if - elif - else block"
	},
	


	"template": {
		"prefix": "main template",
		"body": [
			"# imports go here",
			"",
			"",
			"",
			"",
			"def main():",
			"    ''' main entry point for the code '''",
			"    ",
			"    return",
			"",
			"",
			"",
			"",
			"",
			"",
			"# main guard idiom",
			"if __name__=='__main__':",
			"    main()",			
			"" 
		],
		"description": "the main template"
	},


}